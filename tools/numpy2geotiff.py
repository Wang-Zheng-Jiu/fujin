#!/usr/bin/python

'''
numpy2geotiff.py
Evan Krell
----------------
Input:  - ASCII file where spaces, line separate numeric 2D array values.
          Such as that generated by numpy.savetxt() with default formatting.
        - Geotiff raster with target extent, coordinate system.
        - File to save output raster
Output: - Geotiff raster of same extent, coordinate system as input.
          Raster values are just a copy of the input ASCII file.

Todo: Multiple input ASCII files, each a band of the output raster.
'''

from optparse import OptionParser
import numpy as np
from osgeo import gdal

def main():
    # Options
    parser = OptionParser()
    parser.add_option("-g", "--geotiff_in",    default = None,
        help = "Raster (geotiff) of region [required].")
    parser.add_option("-n", "--numpy",         default = None,
        help = "ASCII numeric 2D array file [required].")
    parser.add_option("-o", "--geotiff_out",   default = None,
        help = "Output raster (geotiff) [required].")
    (options, args) = parser.parse_args()
    # Verify presence of required options
    if    options.geotiff_in  is None \
       or options.numpy       is None \
       or options.geotiff_out is None:
           parser.print_help()
           exit(1)
    # Load input raster
    in_raster = gdal.Open(options.geotiff_in)
    in_grid   = in_raster.GetRasterBand(1).ReadAsArray()
    # Load input ASCII
    in_ascii  = np.loadtxt(options.numpy)
    # Verify same dimensions
    if in_grid.shape[0] != in_grid.shape[0] or \
       in_grid.shape[1] != in_grid.shape[1]:
        print("Input geotiff (-g) and input numpy (-n) must have same row, column lengths")
        exit(1)
    # Create output raster
    out_raster = gdal.GetDriverByName('GTiff').Create(
        options.geotiff_out, in_grid.shape[1], in_grid.shape[0],
        1, gdal.GDT_Float32)
    out_raster.SetGeoTransform(in_raster.GetGeoTransform())
    out_raster.SetProjection(in_raster.GetProjection())
    out_band = out_raster.GetRasterBand(1)
    # Write ASCII grid to output raster
    out_band.WriteArray(in_ascii)
    # Write output raster to disk
    out_raster.FlushCache()

if __name__ == '__main__':
    main()
